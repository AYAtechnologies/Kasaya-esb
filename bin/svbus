#!/usr/bin/env python
#coding: utf-8
from __future__ import unicode_literals, print_function
from kasaya.core.client import control
from kasaya.conf import load_config_from_file
import plac
#from pprint import pprint


class Jobs(object):
    commands = ['list', 'wrkstop', 'wrkstats', 'svcstart', 'svcstop']


    def __init__(self):
        pass
    #    load_config_from_file("examples/kasaya.conf")


    @plac.annotations(
        u=("Show UUID identifiers", "flag"),
        hi=("Hide offline services", "flag"),
    )
    def list(self, u=False, hi=False):
        """
        List all hosts and workers running in service bus
        """
        hostline     = "  {service: >{ws}}  {addr: <{wa}} (hostname: {hostname})"
        workerline   = "  {service: >{ws}}  on port: {port} {extra}"
        inactiveline = "  {service: >{ws}}  off"

        if u:
            hostline   += "   uuid: {uuid}"
            workerline += "   uuid: {uuid}  pid: {pid}"

        # all hosts in network
        hosts = control.svbus.status()

        # maximum length of names
        whst, wadr, wsvc = 5,0,0
        for h in hosts:
            whst = max(whst, len(h['hostname']) )
            wadr = max(wadr, len(h['addr']) )
            for s in h['services']:
                wsvc = max(wsvc, len(s['service']) )

        # report
        hcnt, wcnt = 0,0
        for h in hosts:
            hcnt += 1
            print ( hostline.format(wh=whst, wa=wadr, ws=wsvc, service="SYNCD", **h) )

            inact = []
            for w in h['services']:
                # if worker is not managed,
                # which means that this worker is not existing in local services set
                # and cannot be started after shutting down by syncd daemon,
                # then show exclamation let know about this
                if not w['managed']:
                    w['extra'] = "[!]"
                else:
                    w['extra'] = "   "

                if not w['running']:
                    inact.append( w['service'])
                    continue

                wcnt += 1
                print ( workerline.format(ws=wsvc, **w) )

            # inactive services
            if (not hi) and (len(inact)>0):
                for sv in inact:
                    print ( inactiveline.format(ws=wsvc, service=sv) )

            print ()

        print ("Total number of hosts: {0}, running services: {1}".format(hcnt, wcnt) )



    @plac.annotations(
        uuid=("UUID of worker to stop"),
        terminate=("Use pid rather then uuid", "flag"),
        sigkill=("Send SIGKILL (if everything else fails)", "flag")
    )
    def wrkstop(self, uuid, terminate=False, sigkill=False):
        """
        Send stop signal to worker with specified uuid. If worker is currently
        processing task, it will stop after finishing current job.
        """
        control.worker.stop(uuid, terminate, sigkill)


    @plac.annotations(
        uuid=("UUID of worker to show stats")
    )
    def wrkstats(self, uuid):
        """
        Send stop signal to worker with specified uuid. If worker is currently
        processing task, worker will stop after finishing current job.
        """
        res = control.worker.stats(uuid)
        if res is None:
            print ("Worker not found (uuid: %s)" % uuid)
            return

        ln = "{0:>26}: {1}"
        print (ln.format("service name",res['service']))
        addr = "%s:%i" % (res['ip'], res['port'])
        print ( ln.format("address", addr) )
        print ( ln.format("used memory", "{:,} KB".format(res['mem_total'])) )
        ttot = res['task_err'] + res['task_ctl'] + res['task_succ']
        print ( ln.format("total processed tasks", ttot) )
        print ( ln.format("successfull tasks", res['task_succ']) )
        print ( ln.format("error tasks", res['task_err']) )
        print ( ln.format("control tasks", res['task_ctl']) )
        print ( ln.format("non existing method calls", res['task_nonx']) )



    @plac.annotations(
        name=("name of the service to start"),
        ip=("IP of host on which service should be started")
    )
    def svcstart(self, name, ip=None):
        res = control.service.start(name, ip)

    @plac.annotations(
        servicename=("name of the service to stop"),
        ip=("IP of host on which service should be stopped")
    )
    def svcstop(self, servicename, ip=None):
        control.service.stop(servicename, ip)


if __name__=="__main__":
    #from kasaya.conf import settings
    #print (settings.SERVICE_BUS_NAME)
    plac.call( Jobs() )
